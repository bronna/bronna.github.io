const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./CNw0k7zg.js","./CR_3py8g.js","./CVuNfkzf.js","./DlPLwntU.js","./B29C6zgS.js","./qDpDdD8I.js","./BWPhJSfu.js","./DWvpJWiV.js","./VZ_jJvjc.js","./sB8_Elye.js","./BFtRNllT.js","./BnTsw4sx.js","../assets/Header.DP15Smb-.css","../assets/_post.CPMITpfg.css","./Dt6cWVIg.js","./CKjjvfn1.js","./wwKeP0Ca.js","./Dk5IxytF.js","../assets/useLoader.C-GW8brK.css","./DQ2BjByB.js","./BelD7lMf.js","./CWSgjiR8.js","./Cpj98o6Y.js","./fgMBUPYp.js","./SvejjJjI.js"])))=>i.map(i=>d[i]);
import{b as Se,d as et,a as B,t as J,c as Be}from"./CR_3py8g.js";import"./BFtRNllT.js";import{g as tt,h as Pe,d as je,j as at,P as nt,k as Ie,at as st,au as ot,av as rt,K as it,aq as lt,A as ct,O as d,N as u,v as e,b as V,E as n,F as i,C as Le,D as pt,B as ve,G as o,n as ge,x as Y}from"./CVuNfkzf.js";import{p as _,l as ut,s as dt}from"./DWvpJWiV.js";import{_ as ht}from"./B29C6zgS.js";import{_ as X,i as mt,c as qe}from"./DlPLwntU.js";import{d as vt,s as H}from"./qDpDdD8I.js";import{e as gt,r as S,i as kt,a as ft}from"./BWPhJSfu.js";import{b as K,a as bt}from"./BGj2er40.js";import{o as _t}from"./Dk5IxytF.js";function yt(g,c,C,P,q){var y=g,h="",k;tt(()=>{if(h===(h=c()??"")){Pe&&je();return}k!==void 0&&(nt(k),k=void 0),h!==""&&(k=at(()=>{if(Pe){Ie.data;for(var p=je(),F=p;p!==null&&(p.nodeType!==8||p.data!=="");)F=p,p=st(p);if(p===null)throw ot(),rt;Se(Ie,F),y=it(p);return}var T=h+"",m=et(T);Se(lt(m),m.lastChild),y.before(m)}))})}function wt(g,c){u(c,_(Date.now()))}var xt=J('<div class="loading-container svelte-1bxuoe6"><div class="loading-placeholder svelte-1bxuoe6"><p class="svelte-1bxuoe6">Loading...</p></div></div>'),Ct=(g,c)=>c("lygia"),Ft=(g,c)=>c("richter"),Tt=(g,c)=>c("ocean"),At=(g,c)=>c("monochrome"),Rt=J('<div class="color-control svelte-1bxuoe6"><input type="color" class="svelte-1bxuoe6"> <span class="color-label svelte-1bxuoe6"></span></div>'),$t=J(`<div class="generative-art-container svelte-1bxuoe6"><div class="artwork-display svelte-1bxuoe6"><!></div> <div class="controls svelte-1bxuoe6"><div class="control-section svelte-1bxuoe6"><h3 class="svelte-1bxuoe6">Grid Settings</h3> <div class="control-group svelte-1bxuoe6"><label for="width" class="svelte-1bxuoe6"> </label> <input id="width" type="range" min="10" max="100" class="svelte-1bxuoe6"></div> <div class="control-group svelte-1bxuoe6"><label for="height" class="svelte-1bxuoe6"> </label> <input id="height" type="range" min="10" max="120" class="svelte-1bxuoe6"></div> <div class="control-group svelte-1bxuoe6"><label for="columns" class="svelte-1bxuoe6"> </label> <input id="columns" type="range" min="3" max="50" class="svelte-1bxuoe6"></div> <div class="control-group svelte-1bxuoe6"><label for="rows" class="svelte-1bxuoe6"> </label> <input id="rows" type="range" min="3" max="50" class="svelte-1bxuoe6"></div> <div class="control-group svelte-1bxuoe6"><label class="svelte-1bxuoe6"><input type="checkbox" class="svelte-1bxuoe6"> Wireframe Mode</label></div></div> <div class="control-section svelte-1bxuoe6"><h3 class="svelte-1bxuoe6">Palette</h3> <div class="palette-presets svelte-1bxuoe6"><button class="svelte-1bxuoe6">Lygia Clarke</button> <button class="svelte-1bxuoe6">Richter</button> <button class="svelte-1bxuoe6">Ocean</button> <button class="svelte-1bxuoe6">Monochrome</button></div> <div class="color-inputs svelte-1bxuoe6"></div></div> <div class="control-section svelte-1bxuoe6"><h3 class="svelte-1bxuoe6">Generation</h3> <button class="regenerate-btn svelte-1bxuoe6">Regenerate Pattern</button></div></div> <div class="description svelte-1bxuoe6"><h2 class="svelte-1bxuoe6">About</h2> <p class="svelte-1bxuoe6">This interactive generative artwork is inspired by the work of Brazilian artist <a href="https://www.moma.org/artists/27445" target="_blank" rel="noopener noreferrer" class="svelte-1bxuoe6">Lygia Clarke</a>. 
            The system uses a broken grid approach combined with noise functions to create organic, 
            yet structured compositions.</p> <p class="svelte-1bxuoe6">Each time you regenerate, the noise seed changes, creating entirely new arrangements 
            while maintaining the underlying mathematical relationships. The color distribution 
            varies based on column width, mimicking the intentional choices in Clarke's original works.</p> <p class="svelte-1bxuoe6">This implementation uses <strong>Threlte</strong> (Svelte's Three.js wrapper) and runs 
            entirely in your browser using WebGL for smooth performance.</p></div></div>`);function Dt(g,c){ct(c,!0);let C=d(void 0),P=d(void 0),q,y,h,k,p,F,T,m=d(!1),G=d(50),O=d(86),x=d(12),A=d(10),W=d(!1),Q=d(_(Date.now())),R=d(_(["#B04E26","#007443","#263E66","#CABCA2","#C3C3B7","#8EA39C","#E5C03C","#66857F","#3A5D57"]));const Ge={lygia:["#B04E26","#007443","#263E66","#CABCA2","#C3C3B7","#8EA39C","#E5C03C","#66857F","#3A5D57"],richter:["#FF0000","#00FF00","#0000FF","#FFFF00","#FF00FF","#00FFFF","#FFA500","#800080","#FFC0CB"],ocean:["#001f3f","#0074D9","#7FDBFF","#39CCCC","#3D9970","#2ECC40","#01FF70","#FFDC00","#FF851B"],monochrome:["#000000","#1a1a1a","#333333","#4d4d4d","#666666","#808080","#999999","#b3b3b3","#cccccc"]};let j,$,Z,I=d(void 0),D=d(void 0),L=d(void 0),ke=Y(()=>e(m)?Oe(e(x)):[]),ee=Y(()=>e(m)?We(e(G),e(O),e(x),e(A),e(ke)):[]),fe=Y(()=>e(m)?ze(e(x),e(A),e(R),e(ke)):new Float32Array);_t(async()=>{const t=await X(()=>import("./CNw0k7zg.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]),import.meta.url),s=await X(()=>import("./DQ2BjByB.js"),__vite__mapDeps([19,1,2,17,8,15,16,4,5,3,6,7,9,10,11,12,13,18,20,21,14,22,23]),import.meta.url),a=await X(()=>import("./wwKeP0Ca.js").then(r=>r.T),[],import.meta.url),l=await X(()=>import("./SvejjJjI.js").then(r=>r.m),__vite__mapDeps([24,22]),import.meta.url);u(C,_(t.Canvas)),u(P,_(s.InstancedMesh)),q=a.Object3D,y=a.Color,h=a.MathUtils,k=a.PlaneGeometry,p=a.MeshBasicMaterial,F=a.InstancedBufferAttribute,T=l.makeNoise2D,j=T(e(Q)),$=new q,Z=new y,u(D,_(new k(1,1))),u(L,_(new p({vertexColors:!0,wireframe:e(W),toneMapped:!1}))),u(m,!0)});function Oe(t){const s=[2,4,7,8,10,11];if(t<=12)return s;const a=Array.from({length:Math.floor((t-12)/2)},()=>Math.floor(Math.random()*(t-12))+13);return[...new Set([...s,...a])].sort((l,r)=>l-r)}function We(t,s,a,l,r){if(!e(m)||!j)return[];const v=[];let f=0;const w=s/l;for(let b=0;b<a;b++){const E=j(b,0)*5,M=t-f,N=M/(a-b),U=r.includes(b+1)?N/h.mapLinear(E,-1,1,3,4):N*h.mapLinear(E,-1,1,1.5,2),Me=b===a-1?M:U;for(let me=0;me<l;me++)v.push({x:f+Me/2-t/2,y:me*w+w/2-s/2,scaleX:Me,scaleY:w});f+=U}return v}function ze(t,s,a,l){if(!e(m)||!Z)return new Float32Array;const r=[];for(let v=0;v<t;v++)for(let f=0;f<s;f++){const w=j(v,f)*1.5,b=l.includes(v+1)?[0,4]:[1,a.length-1],E=Math.floor(h.mapLinear(w,-1.5,1.5,...b)),M=Z.set(a[E]).toArray();r.push(M)}return new Float32Array(r.flat())}V(()=>{if(e(I)&&e(ee).length>0&&$){for(let t=0;t<e(ee).length;t++){const{x:s,y:a,scaleX:l,scaleY:r}=e(ee)[t];$.position.set(s,a,0),$.scale.set(l,r,1),$.updateMatrix(),e(I).setMatrixAt(t,$.matrix)}e(I).instanceMatrix.needsUpdate=!0}}),V(()=>{e(L)&&(e(L).wireframe=e(W))}),V(()=>{if(e(D)&&e(fe).length>0&&F){const t=new F(e(fe),3);e(D).setAttribute("color",t),e(D).attributes.color.needsUpdate=!0}}),V(()=>{e(m)&&T&&(j=T(e(Q)))});function z(t){u(R,_([...Ge[t]]))}function Ne(t,s){e(R)[t]=s,u(R,_([...e(R)]))}var te=$t(),ae=i(te),Ue=i(ae);{var Ve=t=>{var s=Be(),a=ve(s);qe(a,()=>e(C),(l,r)=>{r(l,{camera:{position:[0,0,65]},children:(v,f)=>{var w=Be(),b=ve(w),E=Y(()=>e(x)*e(A));qe(b,()=>e(P),(M,N)=>{N(M,{get geometry(){return e(D)},get material(){return e(L)},get count(){return e(E)},get ref(){return e(I)},set ref(U){u(I,_(U))}})}),B(v,w)},$$slots:{default:!0}})}),B(t,s)},Ye=t=>{var s=xt();B(t,s)};mt(Ue,t=>{e(m)&&e(C)&&e(D)&&e(L)?t(Ve):t(Ye,!1)})}o(ae);var be=n(ae,2),ne=i(be),se=n(i(ne),2),oe=i(se),Xe=i(oe);o(oe);var _e=n(oe,2);S(_e),o(se);var re=n(se,2),ie=i(re),He=i(ie);o(ie);var ye=n(ie,2);S(ye),o(re);var le=n(re,2),ce=i(le),Ke=i(ce);o(ce);var we=n(ce,2);S(we),o(le);var pe=n(le,2),ue=i(pe),Je=i(ue);o(ue);var xe=n(ue,2);S(xe),o(pe);var Ce=n(pe,2),Fe=i(Ce),Te=i(Fe);S(Te),ge(),o(Fe),o(Ce),o(ne);var de=n(ne,2),he=n(i(de),2),Ae=i(he);Ae.__click=[Ct,z];var Re=n(Ae,2);Re.__click=[Ft,z];var $e=n(Re,2);$e.__click=[Tt,z];var Qe=n($e,2);Qe.__click=[At,z],o(he);var De=n(he,2);gt(De,21,()=>e(R),kt,(t,s,a)=>{var l=Rt(),r=i(l);S(r),r.__change=f=>Ne(a,f.target.value);var v=n(r,2);v.textContent=`Color ${a+1}`,o(l),Le(()=>ft(r,e(s))),B(t,l)}),o(De),o(de);var Ee=n(de,2),Ze=n(i(Ee),2);Ze.__click=[wt,Q],o(Ee),o(be),ge(2),o(te),Le(()=>{H(Xe,`Width: ${e(G)??""}`),H(He,`Height: ${e(O)??""}`),H(Ke,`Columns: ${e(x)??""}`),H(Je,`Rows: ${e(A)??""}`)}),K(_e,()=>e(G),t=>u(G,t)),K(ye,()=>e(O),t=>u(O,t)),K(we,()=>e(x),t=>u(x,t)),K(xe,()=>e(A),t=>u(A,t)),bt(Te,()=>e(W),t=>u(W,t)),B(g,te),pt()}vt(["click","change"]);const Et={title:"Creating Generative Art with Threlte: A Tribute to Lygia Clarke",date:"2025-05-22",description:"Exploring generative art through code by recreating the geometric minimalism of Brazilian artist Lygia Clarke using Threlte and SvelteKit",draft:!0,categories:["generative art","three.js","threlte","svelte","webgl"]};var Mt=J('<p>The intersection of mathematics, code, and visual art has always fascinated me. Recently, I discovered an incredible tutorial on creating generative artwork inspired by Brazilian artist <a href="https://www.moma.org/artists/27445" rel="noopener noreferrer" target="_blank">Lygia Clarke</a>, whose minimalist geometric paintings provide the perfect foundation for algorithmic interpretation.</p> <p>The original tutorial used React Three Fiber, but I was curious: could I adapt this to work with Threlte, Svelte’s Three.js wrapper, and integrate it seamlessly into my SvelteKit blog? The answer is absolutely yes, and the result is even more elegant.</p> <!> <h2>The Power of Breaking Grids</h2> <p>What makes this generative system compelling isn’t just the grid—it’s how we deliberately break it. Clarke’s original works show intentional deviations from perfect regularity, creating rhythm and visual interest through controlled chaos.</p> <p>The algorithm starts with a systematic grid but introduces several layers of variation:</p> <h3>1. Column Width Variation</h3> <p>Rather than uniform columns, the system designates certain columns as “small” and others as “wide,” then uses Simplex noise to add organic variation to these base proportions.</p> <h3>2. Color Distribution Rules</h3> <p>Colors aren’t randomly distributed. The system follows rules inspired by Clarke’s work—certain colors appear more frequently in wider columns, while others are restricted to narrower sections.</p> <h3>3. Noise-Driven Positioning</h3> <p>Every element’s final position is influenced by 2D noise functions, creating smooth, organic variations that feel natural rather than computerized.</p> <h2>Why Threlte?</h2> <p>Adapting this from React Three Fiber to Threlte revealed some interesting advantages:</p> <p><strong>Reactive by Design</strong>: Svelte’s reactivity makes it trivial to update the entire artwork when parameters change. No need for complex state management—just reactive statements.</p> <p><strong>Smaller Bundle Size</strong>: The Threlte version is significantly lighter than its React counterpart, loading faster and consuming less memory.</p> <p><strong>Simpler Component Architecture</strong>: Svelte’s straightforward component model makes the code more readable and maintainable.</p> <h2>Technical Implementation</h2> <p>The core challenge was translating React Three Fiber’s <code>useFrame</code> hook to Threlte’s equivalent, and managing the instanced mesh updates efficiently. Here’s how the key pieces work:</p> <pre class="language-javascript"><!></pre> <p>The beauty lies in how Svelte 5’s new reactivity primitives (<code>$derived</code>, <code>$effect</code>, <code>$state</code>) automatically recalculate the grid when any parameter changes, while Three.js handles the heavy lifting of rendering thousands of instances efficiently.</p> <h2>Beyond the Grid</h2> <p>What started as a recreation exercise opened up endless possibilities. Try different settings in the interactive version above:</p> <ul><li><strong>Richter Mode</strong>: Set columns to 1 and rows to high values for stripe patterns reminiscent of Gerhard Richter’s work</li> <li><strong>Mondrian Style</strong>: Use the monochrome palette with high contrast settings</li> <li><strong>Organic Flow</strong>: Increase the grid size and use the ocean palette for more fluid, natural-feeling compositions</li></ul> <p>The system demonstrates how simple rules, when combined with controlled randomness, can generate infinite variations while maintaining artistic coherence.</p> <h2>What’s Next?</h2> <p>This exploration has me thinking about other generative art techniques that could work beautifully in Svelte:</p> <ul><li><strong>Flow Fields</strong>: Using vector fields to guide particle movement</li> <li><strong>Recursive Patterns</strong>: Self-similar structures that scale infinitely</li> <li><strong>Data-Driven Art</strong>: Translating real datasets into visual patterns</li></ul> <p>The combination of Svelte’s developer experience, Threlte’s Three.js integration, and the web’s accessibility makes it an incredibly powerful platform for generative art experimentation.</p> <p><em>Want to dive deeper? Check out the <a href="https://tympanus.net/codrops/2025/01/15/creating-generative-artwork-with-three-js/" rel="noopener noreferrer" target="_blank">original tutorial</a> that inspired this adaptation, and experiment with the interactive version above. Each generation creates something unique.</em></p>',1);function zt(g,c){const C=ut(c,["children","$$slots","$$events","$$legacy"]);ht(g,dt(()=>C,Et,{children:(P,q)=>{var y=Mt(),h=n(ve(y),4);Dt(h,{});var k=n(h,34),p=i(k);yt(p,()=>`<code class="language-javascript"><span class="token comment">// Reactive calculations update automatically when props change</span>
<span class="token keyword">let</span> squares <span class="token operator">=</span> <span class="token function">$derived</span><span class="token punctuation">(</span>mounted <span class="token operator">?</span> <span class="token function">calculateSquares</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> columns<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> smallColumns<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token function">$derived</span><span class="token punctuation">(</span>mounted <span class="token operator">?</span> <span class="token function">calculateColors</span><span class="token punctuation">(</span>columns<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> palette<span class="token punctuation">,</span> smallColumns<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// Animation loop updates instance matrices</span>
<span class="token function">$effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mounted <span class="token operator">&amp;&amp;</span> useFrame<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">useFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>meshRef <span class="token operator">||</span> <span class="token operator">!</span>squares<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span>
            
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> squares<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> scaleX<span class="token punctuation">,</span> scaleY <span class="token punctuation">&#125;</span> <span class="token operator">=</span> squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                dummy<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
                dummy<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>scaleX<span class="token punctuation">,</span> scaleY<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                dummy<span class="token punctuation">.</span><span class="token function">updateMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                meshRef<span class="token punctuation">.</span><span class="token function">setMatrixAt</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> dummy<span class="token punctuation">.</span>matrix<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
            meshRef<span class="token punctuation">.</span>instanceMatrix<span class="token punctuation">.</span>needsUpdate <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`),o(k),ge(20),B(P,y)},$$slots:{default:!0}}))}export{zt as default,Et as metadata};
